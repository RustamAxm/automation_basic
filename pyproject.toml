[project]
name = "automation-basics"
dynamic = ["version"]
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12,<3.13"
dependencies = [
    "ftd2xx>=1.3.8",
    "loguru>=0.7.3",
    "numpy>=2.2.4",
    "poethepoet>=0.33.1",
    "pyserial>=3.5",
    "pyzmq>=26.4.0",
]

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "ruff>=0.11.6",
    "setuptools>=80.9.0",
    "sphinx-automodapi>=0.18.0",
    "sphinx-rtd-theme>=3.0.2",
    "sphinx-simplepdf>=1.6.0",
    "sphinx>=8.2.3",
    "sphinxcontrib-bibtex>=2.6.3",
    "pytest-mock>=3.14.1",
    "pytest-cov>=6.2.1",
    "ty>=0.0.1a16",
    "pre-commit>=4.2.0",
    "pre-commit-hooks>=5.0.0",
    "pytest-sugar>=1.0.0",
]


[tool.poe.tasks]
linter.shell = "ruff check src"
html.shell = """rm -fr docs/build &&
                sphinx-build -M html docs/source docs/build"""
pdf.shell = """rm -fr docs/build &&
               sphinx-build -M simplepdf docs/source docs/build"""
api-rst.shell = """rm -fr docs/source/api &&
                   sphinx-apidoc --module-first --implicit-namespaces --no-toc --force \
                   -o docs/source/api src/automation_basics"""
test-demo.shell = """pytest -vs --cov=src --junitxml=test-results/$(date '+%F_s%s').xml \
                     src """
create-com.shell = "socat -d -d pty,raw,echo=0,link=/tmp/ttyV0 pty,raw,echo=0,link=/tmp/ttyV1"
pre-commit.shell = "pre-commit install"

[project.scripts]
simple = "automation_basics.simple_functions.main:main"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-vvs"
testpaths = [
    "src/automation_basics/test_demo",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
]

[tool.ruff]
# Set as desired, typically 88 (black standard) or 100 (wide).
line-length = 100

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]
ignore = ['UP012']

[tool.hatch.build.targets.wheel]
packages = ["src/automation_basics"]

[build-system]
requires = ["hatchling", "uv-dynamic-versioning", "hatch-build-scripts"]
build-backend = "hatchling.build"

[[tool.hatch.build.hooks.build-scripts.scripts]]
commands = [
    """echo 'hello form prebuild'""",
]

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
bump = true
fallback-version = "0.0.0"

